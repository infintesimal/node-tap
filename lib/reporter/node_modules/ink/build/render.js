"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash.throttle"));

var _logUpdate = _interopRequireDefault(require("./vendor/log-update"));

var _createReconciler = _interopRequireDefault(require("./create-reconciler"));

var _createRenderer = _interopRequireDefault(require("./create-renderer"));

var _dom = require("./dom");

var _App = _interopRequireDefault(require("./components/App"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = (node, options = {}) => {
  // Stream was passed instead of `options` object
  if (typeof options.write === 'function') {
    options = {
      stdout: options,
      stdin: process.stdin
    };
  }

  options = _objectSpread({
    stdout: process.stdout,
    stdin: process.stdin,
    debug: false,
    exitOnCtrlC: true
  }, options);
  const rootNode = (0, _dom.createNode)('root');
  const render = (0, _createRenderer.default)({
    terminalWidth: options.stdout.columns
  });

  const log = _logUpdate.default.create(options.stdout);

  const throttledLog = options.debug ? log : (0, _lodash.default)(log, {
    leading: true,
    trailing: true
  }); // Ignore last render after unmounting a tree to prevent empty output before exit

  let ignoreRender = false; // Store last output to only rerender when needed

  let lastOutput = '';
  let lastStaticOutput = ''; // This variable is used only in debug mode to store full static output
  // so that it's rerendered every time, not just new static parts, like in non-debug mode

  let fullStaticOutput = '';

  const onRender = () => {
    if (ignoreRender) {
      return;
    }

    const {
      output,
      staticOutput
    } = render(rootNode); // If <Static> output isn't empty, it means new children have been added to it

    const hasNewStaticOutput = staticOutput && staticOutput !== '\n' && staticOutput !== lastStaticOutput;

    if (options.debug) {
      if (hasNewStaticOutput) {
        fullStaticOutput += staticOutput;
        lastStaticOutput = staticOutput;
      }

      options.stdout.write(fullStaticOutput + output);
      return;
    } // To ensure static output is cleanly rendered before main output, clear main output first


    if (hasNewStaticOutput) {
      log.clear();
      options.stdout.write(staticOutput);
      log(output);
      lastStaticOutput = staticOutput;
    }

    if (output !== lastOutput) {
      throttledLog(output);
      lastOutput = output;
    }
  };

  const reconciler = options.stdout._inkReconciler || (0, _createReconciler.default)(onRender);

  if (!options.stdout._ink) {
    options.stdout._ink = true;
    options.stdout._inkReconciler = reconciler;
    options.stdout._inkContainer = reconciler.createContainer(rootNode, false);
  }

  let resolveExitPromise;
  const exitPromise = new Promise(resolve => {
    resolveExitPromise = resolve;
  });

  const unmount = () => {
    onRender();
    log.done();
    ignoreRender = true;
    reconciler.updateContainer(null, options.stdout._inkContainer);
    resolveExitPromise();
  };

  const tree = _react.default.createElement(_App.default, {
    stdin: options.stdin,
    stdout: options.stdout,
    exitOnCtrlC: options.exitOnCtrlC,
    onExit: unmount
  }, node);

  reconciler.updateContainer(tree, options.stdout._inkContainer);
  return {
    waitUntilExit() {
      return exitPromise;
    },

    unmount
  };
};

exports.default = _default;